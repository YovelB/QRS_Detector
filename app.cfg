/* XDCtools modules */
var Log               =   xdc.useModule('xdc.runtime.Log');

/* BIOS and kernel modules */
var BIOS              =   xdc.useModule('ti.sysbios.BIOS');
var Task              =   xdc.useModule('ti.sysbios.knl.Task');
var Swi               =   xdc.useModule('ti.sysbios.knl.Swi');
var Timer             =   xdc.useModule('ti.sysbios.hal.Timer');
var Semaphore         =   xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi               =   xdc.useModule('ti.sysbios.family.c64p.Hwi');
var ECM               =   xdc.useModule('ti.sysbios.family.c64p.EventCombiner');

/* UIA modules */
var LoggingSetup      =   xdc.useModule('ti.uia.sysbios.LoggingSetup');

var devType = "omapl138"

/* Load the OSAL package */ 
var osType = "tirtos"
var Osal = xdc.useModule('ti.osal.Settings');
Osal.osType = osType;
Osal.socType = devType;

/*use CSL package*/
var Csl = xdc.loadPackage('ti.csl');
Csl.Settings.deviceType = devType;

/* Load the Board package and set the board name */
var Board = xdc.loadPackage('ti.board');
Board.Settings.boardName = "lcdkOMAPL138";

/* Load the gpio package */
var Gpio = xdc.loadPackage('ti.drv.gpio');
Gpio.Settings.enableProfiling = false;    
Gpio.Settings.socType = devType;

/* Load the uart package */
var Uart = xdc.useModule('ti.drv.uart.Settings');
Uart.socType = devType;

/* Load the I2C package  - required by board */
var I2c = xdc.loadPackage('ti.drv.i2c');
I2c.Settings.socType = devType;

/* UIA logging module relies on the System module */
var System                      =   xdc.useModule('xdc.runtime.System');
SysStd                          =   xdc.useModule('xdc.runtime.SysStd');
System.SupportProxy             =   SysStd;

/* Load and use the CSL packages */
var Csl                         = xdc.useModule('ti.csl.Settings');
Csl.deviceType                  = devType;

/* Task configuration */
var task0Params = new Task.Params();
task0Params.instance.name = "g_hECGSignalCondition";
task0Params.priority = 2;
Program.global.g_hECGSignalCondition = Task.create("&ECG_SignalConditionTask", task0Params);

var task1Params = new Task.Params();
task1Params.instance.name = "g_hECGFeatureDetect";
Program.global.g_hECGFeatureDetect = Task.create("&ECG_FeatureDetectTask", task1Params);

/* Swi / Hwi configuration */

/* Timer configuration */
var timer0Params = new Timer.Params();
timer0Params.instance.name = "ecgSamplingTimer";
timer0Params.period = 12500;
Program.global.ecgSamplingTimer = Timer.create(null, "&ECG_Timer_ISR", timer0Params);

/* Semaphore configuration */
var semaphore0Params = new Semaphore.Params();
semaphore0Params.instance.name = "g_sample_ready_sem";
Program.global.g_sample_ready_sem = Semaphore.create(null, semaphore0Params);

var semaphore1Params = new Semaphore.Params();
semaphore1Params.instance.name = "g_filtered_ready_sem";
Program.global.g_filtered_ready_sem = Semaphore.create(null, semaphore1Params);

/* Logging configuration */
LoggingSetup.sysbiosSwiLogging = true;
LoggingSetup.sysbiosHwiLogging = true;
LoggingSetup.sysbiosSemaphoreLogging = true;
LoggingSetup.loadTaskLogging = true;
LoggingSetup.loadSwiLogging = true;
LoggingSetup.loadHwiLogging = true;
